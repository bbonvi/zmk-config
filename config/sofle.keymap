/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <80>;
    retro-tap;
};

&sk {
    quick-release;
    release-after-ms = <2000>;
    lazy;
};

/ {
    combos {
        compatible = "zmk,combos";

        command_space {
            bindings = <&kp LG(SPACE)>;
            key-positions = <28 27>;
            timeout-ms = <35>;
            layers = <0>;
            require-prior-idle-ms = <40>;
        };

        sticky_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <31 32>;
            require-prior-idle-ms = <40>;
            timeout-ms = <35>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <33 32 31>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <45 46>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };

        alt_bracket_l {
            bindings = <&kp LA(LEFT_BRACKET)>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <40>;
        };

        alt_bracket_r {
            bindings = <&kp LA(RIGHT_BRACKET)>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            require-prior-idle-ms = <40>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <26 27 28>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };
    };

    macros {
        double_colon: double_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp COLON>;
            label = "::";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE      &kp N1  &kp N2            &kp N3            &kp N4        &kp N5                         &kp N6  &kp N7             &kp N8     &kp N9         &kp N0    &kp MINUS
&kp TAB         &kp Q   &kp W             &kp E             &kp R         &kp T                          &kp Y   &kp U              &kp I      &kp O          &kp P     &kp LBKT
&lt 3 ESC       &kp A   &kp S             &kp D             &kp F         &kp G                          &kp H   &kp J              &kp K      &kp L          &kp SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z   &kp X             &kp C             &kp V         &kp B     &trans       &trans  &kp N   &kp M              &kp COMMA  &kp DOT        &kp FSLH  &trans
                        &kp LEFT_CONTROL  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LGUI  &kp SPACE    &mo 1   &mo 2   &kp RIGHT_CONTROL  &kp LCTRL  &kp LG(SPACE)
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE       &kp F1           &kp F2         &kp F3            &kp F4             &kp F5                              &kp F6         &kp F7          &kp F8                &kp F9                 &kp F10       &kp F11
&trans          &kp SQT          &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp DOT                             &kp AMPERSAND  &kp UNDERSCORE  &kp LBKT              &kp RBKT               &kp PERCENT   &kp F12
&trans          &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL          &kp HASH                            &kp PIPE       &kp COLON       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &kp PIPE
&sk LEFT_SHIFT  &kp CARET        &kp FSLH       &kp ASTERISK      &kp BSLH           &trans            &trans    &trans  &kp GRAVE      &kp DOLLAR      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN   &trans
                                 &trans         &sk LEFT_CONTROL  &sk LEFT_ALT       &sk LEFT_COMMAND  &trans    &trans  &trans         &trans          &trans                &kp PRINTSCREEN
            >;
        };

        raise_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR_ALL                    &trans     &trans                &trans            &trans                &trans         &bt BT_CLR
&trans        &trans        &kp N7        &kp N8        &kp N9        &trans                            &kp PG_UP  &kp C_VOLUME_DOWN     &kp K_MUTE        &kp C_VOLUME_UP       &kp N0         &trans
&trans        &kp NUMBER_0  &kp N4        &kp N5        &kp N6        &kp N0                            &kp PG_DN  &kp C_PREVIOUS        &kp C_PLAY_PAUSE  &kp C_NEXT            &kp COLON      &kp PIPE
&trans        &trans        &kp N1        &kp N2        &kp N3        &trans          &trans    &trans  &trans     &kp C_BRIGHTNESS_DEC  &sk RIGHT_SHIFT   &kp C_BRIGHTNESS_INC  &kp BACKSLASH  &trans
                            &trans        &trans        &trans        &trans          &trans    &trans  &trans     &trans                &trans            &trans
            >;
        };

        upper_layer {
            bindings = <
&trans  &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                    &kp F6    &kp F7         &kp F8  &kp F9         &kp F10     &kp F11
&trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMLOCK   &trans                    &kp HOME  &kp PG_UP      &trans  &kp BACKSPACE  &kp DELETE  &kp F12
&trans  &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &trans           &trans                    &kp LEFT  &kp DOWN       &kp UP  &kp RIGHT      &kp ENTER   &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_0  &trans  &trans    &trans  &kp END   &kp PAGE_DOWN  &trans  &trans         &trans      &trans
                         &trans           &trans           &trans           &trans  &trans    &trans  &trans    &trans         &trans  &trans
            >;
        };
    };
};
