/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&lt {
    tapping-term-ms = <80>;
    retro-tap;
};

&sk { quick-release; };

/ {
    combos {
        compatible = "zmk,combos";

        command_space {
            bindings = <&kp LG(SPACE)>;
            key-positions = <28 27>;
            timeout-ms = <35>;
            layers = <0>;
            require-prior-idle-ms = <40>;
        };

        sticky_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <31 32>;
            require-prior-idle-ms = <40>;
            timeout-ms = <35>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <33 32 31>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 19>;
            timeout-ms = <45>;
            require-prior-idle-ms = <40>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <45 46>;
            timeout-ms = <45>;
            require-prior-idle-ms = <40>;
        };

        alt_bracket_l {
            bindings = <&kp LC(SPACE)>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <40>;
        };

        alt_bracket_r {
            bindings = <&kp LC(SPACE)>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            require-prior-idle-ms = <40>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <39 40>;
            timeout-ms = <35>;
            require-prior-idle-ms = <40>;
        };

        alt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <20 19 21>;
            timeout-ms = <45>;
            require-prior-idle-ms = <40>;
        };
    };

    macros {
        layout_macro: layout_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(SPACE)>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(SPACE)>;

            label = "LAYOUT_MACRO";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        layout_layer_macro: layout_layer_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(SPACE) &sl 1>,
                <&macro_wait_time 500>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(SPACE)>;

            label = "LAYOUT_LAYER_MACRO";
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    behaviors {
        td_t: td_t {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_T";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp R>, <&kp T>;
        };

        td_b: td_b {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_B";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp V>, <&kp B>;
        };

        td_y: td_y {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_Y";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp U>, <&kp Y>;
        };

        td_n: td_n {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_N";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp M>, <&kp N>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE      &kp N1  &kp N2            &kp N3            &kp N4        &kp N5                                          &kp N6  &kp N7       &kp N8     &kp N9         &kp N0    &kp MINUS
&kp TAB         &kp Q   &kp W             &kp E             &kp R         &kp T                                           &kp Y   &kp U        &kp I      &kp O          &kp P     &kp LBKT
&lt 3 ESC       &kp A   &kp S             &kp D             &kp F         &kp G                                           &kp H   &kp J        &kp K      &kp L          &kp SEMI  &kp SQT
&sk LEFT_SHIFT  &kp Z   &kp X             &kp C             &kp V         &kp B     &layout_macro    &layout_layer_macro  &kp N   &kp M        &kp COMMA  &kp DOT        &kp FSLH  &trans
                        &kp LEFT_CONTROL  &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LGUI  &kp SPACE        &sl 1                &sl 2   &lt 3 RCTRL  &kp LCTRL  &kp LG(SPACE)
            >;
        };

        lower_layer {
            bindings = <
&kp GRAVE       &kp F1           &kp F2         &kp F3            &kp F4             &kp F5                           &kp F6         &kp F7          &kp F8                &kp F9                 &kp F10       &kp F11
&trans          &kp SQT          &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp DOT                          &kp AMPERSAND  &kp UNDERSCORE  &kp LBKT              &kp RBKT               &kp PERCENT   &kp F12
&trans          &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL          &kp HASH                         &kp PIPE       &kp COLON       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &kp PIPE
&sk LEFT_SHIFT  &kp CARET        &kp FSLH       &kp ASTERISK      &kp BSLH           &trans         &trans    &trans  &kp GRAVE      &kp DOLLAR      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN   &trans
                                 &trans         &sk LEFT_CONTROL  &sk LEFT_ALT       &layout_macro  &trans    &trans  &trans         &trans          &trans                &kp PRINTSCREEN
            >;
        };

        upper_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR_ALL                    &trans                &trans             &trans            &trans           &trans  &bt BT_CLR
&trans        &trans        &kp N7        &kp N8        &kp N9        &trans                            &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp K_MUTE        &kp C_VOLUME_UP  &trans  &trans
&trans        &kp NUMBER_0  &kp N4        &kp N5        &kp N6        &trans                            &kp C_BRIGHTNESS_DEC  &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &trans  &trans
&trans        &trans        &kp N1        &kp N2        &kp N3        &trans          &trans    &trans  &trans                &trans             &trans            &trans           &trans  &trans
                            &trans        &trans        &trans        &trans          &trans    &trans  &trans                &trans             &trans            &trans
            >;
        };

        caps_layer {
            bindings = <
&trans  &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                        &kp F6    &kp F7         &kp F8  &kp F9         &kp F10     &kp F11
&trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &tog 4                        &kp HOME  &kp PG_UP      &trans  &kp BACKSPACE  &kp DELETE  &kp F12
&trans  &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &mkp LCLK        &mkp RCLK                     &kp LEFT  &kp DOWN       &kp UP  &kp RIGHT      &kp ENTER   &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &mkp MCLK        &kp KP_NUM  &trans    &trans  &kp END   &kp PAGE_DOWN  &trans  &trans         &trans      &trans
                         &trans           &trans           &trans           &trans      &trans    &trans  &trans    &trans         &trans  &trans
            >;
        };

        gaming_layer {
            bindings = <
&trans          &trans  &trans    &trans     &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans    &trans     &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&lt 3 CAPSLOCK  &trans  &trans    &trans     &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans    &trans     &trans        &trans     &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &kp LGUI  &kp LCTRL  &kp LEFT_ALT  &kp SPACE  &kp SPACE    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
