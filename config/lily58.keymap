/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&lt {
    tapping-term-ms = <80>;
    retro-tap;
};

&sk { quick-release; };

&sl {
};

/ {
    combos {
        compatible = "zmk,combos";

        command_space {
            bindings = <&kp LG(SPACE)>;
            key-positions = <28 27>;
            timeout-ms = <30>;
            layers = <0>;
            require-prior-idle-ms = <70>;
        };

        sticky_shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <31 32>;
            require-prior-idle-ms = <40>;
            timeout-ms = <35>;
            layers = <0>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <33 32 31>;
            timeout-ms = <35>;
            require-prior-idle-ms = <55>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 19>;
            timeout-ms = <35>;
            require-prior-idle-ms = <55>;
            layers = <0 5 1 2 5 4 3>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <45 46>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 5 4 3>;
        };

        alt_bracket_r {
            bindings = <&kp LC(SPACE)>;
            key-positions = <32 33>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0 1 2 5>;
        };

        alt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <20 19 21>;
            timeout-ms = <45>;
            require-prior-idle-ms = <40>;
            layers = <0 1 2 5>;
        };

        gaming__enter {
            bindings = <&kp ENTER>;
            key-positions = <40 39>;
            timeout-ms = <45>;
            require-prior-idle-ms = <40>;
            layers = <5>;
        };

        gaming_layer_set {
            bindings = <&to 5>;
            key-positions = <2 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <70>;
            layers = <0>;
        };

        default_layer_set {
            bindings = <&to 0>;
            key-positions = <2 1>;
            timeout-ms = <35>;
            require-prior-idle-ms = <70>;
            layers = <5>;
        };

        key_p {
            bindings = <&kp P>;
            key-positions = <20 21>;
            timeout-ms = <40>;
            require-prior-idle-ms = <40>;
            layers = <0 5>;
        };

        key_t {
            bindings = <&kp T>;
            key-positions = <16 15>;
            timeout-ms = <40>;
            require-prior-idle-ms = <40>;
            layers = <0 5>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <26 27>;
            timeout-ms = <30>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        caps_layer {
            bindings = <&mo 4>;
            key-positions = <26 25>;
            timeout-ms = <40>;
            require-prior-idle-ms = <50>;
            layers = <0>;
        };

        cmd__DISABLED {
            bindings = <&sk LEFT_GUI>;
            key-positions = <43 42>;
            timeout-ms = <30>;
            require-prior-idle-ms = <40>;
            layers = <0 1 2 5>;
        };

        key_p2 {
            bindings = <&kp P>;
            key-positions = <34 21>;
            timeout-ms = <40>;
            require-prior-idle-ms = <40>;
            layers = <0 5>;
        };

        key_q {
            bindings = <&kp Q>;
            key-positions = <14 25>;
            timeout-ms = <40>;
            require-prior-idle-ms = <40>;
            layers = <0>;
        };

        noop1 {
            bindings = <&mo 6>;
            key-positions = <27 26 25>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        noop2 {
            bindings = <&mo 6>;
            key-positions = <32 33 34>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        noop3 {
            bindings = <&mo 6>;
            key-positions = <27 26 25 28>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        noop4 {
            bindings = <&mo 6>;
            key-positions = <32 33 34 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        noop5 {
            bindings = <&mo 6>;
            key-positions = <27 26 25 28 52>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        noop6 {
            bindings = <&mo 6>;
            key-positions = <32 33 34 31 55>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        nav_layer {
            bindings = <&sl 3>;
            key-positions = <52 55>;
            timeout-ms = <80>;
            require-prior-idle-ms = <45>;
            layers = <0>;
        };
    };

    macros {
        layout_macro: layout_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(SPACE)>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(SPACE)>;

            label = "LAYOUT_MACRO";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        layout_layer_macro: layout_layer_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(SPACE) &sl 1>,
                <&macro_wait_time 500>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&kp LC(SPACE)>;

            label = "LAYOUT_LAYER_MACRO";
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    behaviors {
        hold_tap_mod_sticky: hold_tap_mod_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_MOD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
            hold-while-undecided-linger;
        };

        homerow_mod_left: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
            retro-tap;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 53 55 56 57 54>;
            hold-trigger-on-release;
        };

        homerow_mod_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
            retro-tap;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 53 54 55 56 57>;
            hold-trigger-on-release;
        };

        homerow_mod_caps: homerow_mod_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_CAPS";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick-tap-ms = <200>;
            flavor = "tap-unless-interrupted";
            hold-trigger-on-release;
            hold-trigger-key-positions = <13 14 15 16 17 25 26 27 28 29 37 38 39 40 41>;
        };

        hold_tap: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "tap-preferred";
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <250>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE      &kp N1  &kp N2  &kp N3                                          &kp N4                       &kp N5                                                  &kp N6  &kp N7       &kp N8     &kp N9   &kp N0     &kp MINUS
&kp TAB         &kp Q   &kp W   &kp E                                           &kp R                        &kp T                                                   &kp Y   &kp U        &kp I      &kp O    &kp P      &kp LBKT
&lt 4 ESC       &kp A   &kp S   &kp D                                           &kp F                        &kp G                                                   &kp H   &kp J        &kp K      &kp L    &kp SEMI   &kp SQT
&kp LEFT_SHIFT  &kp Z   &kp X   &kp C                                           &kp V                        &kp B            &trans                         &trans  &kp N   &kp M        &kp COMMA  &kp DOT  &kp SLASH  &trans
                                &hold_tap_mod_sticky LEFT_CONTROL LEFT_CONTROL  &hold_tap LEFT_ALT LEFT_ALT  &lt_spc 3 SPACE  &hold_tap LEFT_GUI LEFT_GUI    &mo 1   &mo 2   &lt 4 RCTRL  &kp LCTRL
            >;
        };

        sym_layer {
            bindings = <
&kp GRAVE       &kp F1           &kp F2         &kp F3            &kp F4             &kp F5                             &kp F6         &kp F7          &kp F8                &kp F9                 &kp F10       &kp F11
&trans          &kp SQT          &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp DOT                            &kp AMPERSAND  &kp UNDERSCORE  &kp LBKT              &kp RBKT               &kp PERCENT   &kp F12
&trans          &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL          &kp HASH                           &kp PIPE       &kp COLON       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &kp PIPE
&sk LEFT_SHIFT  &kp CARET        &kp FSLH       &kp ASTERISK      &kp BSLH           &trans    &trans           &trans  &kp GRAVE      &kp DOLLAR      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN   &trans
                                                &trans            &trans             &trans    &layout_macro    &trans  &trans         &trans          &trans
            >;
        };

        num_layer {
            bindings = <
&tog 5  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL                        &out OUT_TOG          &trans             &trans            &trans           &trans     &bt BT_CLR
&trans  &trans        &kp N1        &kp N2        &kp N3        &trans                                &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp K_MUTE        &kp C_VOLUME_UP  &trans     &trans
&trans  &kp NUMBER_0  &kp N4        &kp N5        &kp N6        &trans                                &kp C_BRIGHTNESS_DEC  &kp C_PREVIOUS     &kp C_PLAY_PAUSE  &kp C_NEXT       &trans     &trans
&trans  &trans        &kp N7        &kp N8        &kp N9        &kp LGUI        &kp LALT    &kp LGUI  &kp LG(L)             &kp LGUI           &kp COMMA         &kp DOT          &kp LCTRL  &trans
                                    &trans        &trans        &trans          &trans      &trans    &trans                &trans             &trans
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans          &trans     &trans        &trans        &trans                    &trans  &trans     &trans     &trans  &trans  &trans
&trans  &trans          &trans     &trans        &trans        &trans                    &trans  &trans     &trans     &trans  &trans  &trans
&trans  &sk LEFT_SHIFT  &sk LCTRL  &sk LEFT_ALT  &sk LEFT_GUI  &trans                    &trans  &kp LC(D)  &kp LC(U)  &trans  &trans  &trans
&trans  &trans          &trans     &trans        &trans        &trans  &trans    &trans  &trans  &trans     &trans     &trans  &trans  &trans
                                   &trans        &trans        &trans  &trans    &trans  &trans  &trans     &trans
            >;
        };

        caps_layer {
            bindings = <
&trans  &kp F1           &kp F2           &kp F3           &kp F4           &kp F5                        &kp F6    &kp F7         &kp F8  &kp F9         &kp F10     &kp F11
&trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &tog 5                        &kp HOME  &kp PG_UP      &trans  &kp BACKSPACE  &kp DELETE  &kp F12
&trans  &kp KP_NUMBER_4  &kp KP_N5        &kp KP_NUMBER_6  &mkp LCLK        &mkp RCLK                     &kp LEFT  &kp DOWN       &kp UP  &kp RIGHT      &kp ENTER   &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &mkp MCLK        &kp KP_NUM  &trans    &trans  &kp END   &kp PAGE_DOWN  &trans  &trans         &trans      &trans
                                          &trans           &trans           &trans      &trans    &trans  &trans    &trans         &trans
            >;
        };

        gaming_layer {
            bindings = <
&trans          &trans  &trans  &trans     &trans        &trans                                 &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans     &trans        &trans                                 &trans  &trans  &trans  &trans  &trans  &trans
&lt 4 CAPSLOCK  &trans  &trans  &trans     &trans        &trans                                 &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans     &trans        &trans     &trans              &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                &kp LCTRL  &kp LEFT_ALT  &kp SPACE  &kp LEFT_COMMAND    &trans  &trans  &trans  &trans
            >;
        };

        noop_layer {
            bindings = <
&none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none                  &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none  &none
                     &none  &none  &none  &none    &none  &none  &none  &none
            >;
        };
    };
};
